/*
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * 
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 * - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { SessionManager } from '@/utils/sessionManager';
import { createClient } from '@supabase/supabase-js';
import type { Post, Section, MaterialType } from '@/types/postManagement';

export const usePostManagement = () => {
  // # 1. –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const [posts, setPosts] = useState<Post[]>([]);
  const [sections, setSections] = useState<Section[]>([]);
  const [materialTypes, setMaterialTypes] = useState<MaterialType[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<string>('');
  const { toast } = useToast();

  // # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadAllData();
  }, []);

  // # 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadAllData = async () => {
    setIsLoading(true);
    setError(null);
    setDebugInfo('');
    
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
      setDebugInfo('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select('*')
        .order('published_at', { ascending: false });

      if (postsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', postsError);
        setDebugInfo(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤: ${postsError.message}`);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã: ${postsError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤`);
      setDebugInfo(`–ù–∞–π–¥–µ–Ω–æ ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

      const { data: sectionsData, error: sectionsError } = await supabase
        .from('sections')
        .select('*')
        .order('name');

      if (sectionsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', sectionsError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã: ${sectionsError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sectionsData?.length || 0} —Ä–∞–∑–¥–µ–ª–æ–≤`);

      const { data: materialTypesData, error: materialTypesError } = await supabase
        .from('material_types')
        .select('*')
        .order('name');

      if (materialTypesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', materialTypesError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${materialTypesError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${materialTypesData?.length || 0} —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setSections(sectionsData || []);
      setMaterialTypes(materialTypesData || []);
      setDebugInfo(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤, ${sectionsData?.length || 0} —Ä–∞–∑–¥–µ–ª–æ–≤, ${materialTypesData?.length || 0} —Ç–∏–ø–æ–≤`);

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      if (!postsData || postsData.length === 0) {
        console.log('‚ÑπÔ∏è –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        setPosts([]);
        setDebugInfo('–ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        setIsLoading(false);
        return;
      }

      // # 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
      console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤...');
      setDebugInfo('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');

      const postsWithRelations = await Promise.all(
        postsData.map(async (post, index) => {
          console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç ${index + 1}/${postsData.length}: ${post.title}`);
          
          try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å—Ç–∞
            const { data: postSections, error: sectionsError } = await supabase
              .from('post_sections')
              .select(`
                sections!inner (
                  id,
                  name
                )
              `)
              .eq('post_id', post.id);

            if (sectionsError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}:`, sectionsError);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å—Ç–∞
            const { data: postMaterialTypes, error: typesError } = await supabase
              .from('post_material_types')
              .select(`
                material_types!inner (
                  id,
                  name
                )
              `)
              .eq('post_id', post.id);

            if (typesError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}:`, typesError);
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
            const sections = (postSections || []).map(ps => ps.sections).filter(Boolean);
            const material_types = (postMaterialTypes || []).map(pmt => pmt.material_types).filter(Boolean);

            console.log(`‚úÖ –ü–æ—Å—Ç "${post.title}": ${sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤, ${material_types.length} —Ç–∏–ø–æ–≤`);

            return {
              ...post,
              sections,
              material_types
            };
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ ${post.id}:`, error);
            return {
              ...post,
              sections: [],
              material_types: []
            };
          }
        })
      );

      console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      setPosts(postsWithRelations);
      setDebugInfo(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${postsWithRelations.length} –ø–æ—Å—Ç–æ–≤ —Å –∏—Ö —Å–≤—è–∑—è–º–∏`);

    } catch (error: any) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      setDebugInfo(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // # 5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
  const autoClassifyPost = (post: Post) => {
    const autoSections: string[] = [];
    const autoMaterialTypes: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ —Ä–∞–∑–¥–µ–ª–∞–º
    sections.forEach(section => {
      const hasMatchingHashtag = section.hashtags.some(sectionTag =>
        post.hashtags.some(postTag => 
          postTag.toLowerCase() === sectionTag.toLowerCase()
        )
      );
      if (hasMatchingHashtag) {
        autoSections.push(section.id);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materialTypes.forEach(type => {
      const hasMatchingHashtag = type.hashtags.some(typeTag =>
        post.hashtags.some(postTag => 
          postTag.toLowerCase() === typeTag.toLowerCase()
        )
      );
      if (hasMatchingHashtag) {
        autoMaterialTypes.push(type.id);
      }
    });

    return { autoSections, autoMaterialTypes };
  };

  // # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
  const savePostClassification = async (
    post: Post, 
    selectedSections: string[], 
    selectedMaterialTypes: string[]
  ) => {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞:', post.id);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é
      const currentSession = SessionManager.getCurrentSession();
      if (!currentSession) {
        throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏');
      }

      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è');

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
      const adminSupabase = createClient(
        'https://gpfsdgrpnlnpjovhufxu.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdwZnNkZ3JwbmxucGpvdmh1Znh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyOTk2MTQsImV4cCI6MjA2NTg3NTYxNH0.1-fuATIN4x7754HajqvGGKLrQ3tkjbxyw7QluoulJ_8',
        {
          global: {
            headers: {
              'authorization': currentSession.sessionToken
            }
          }
        }
      );

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤');
      const [sectionsDelete, typesDelete] = await Promise.all([
        adminSupabase.from('post_sections').delete().eq('post_id', post.id),
        adminSupabase.from('post_material_types').delete().eq('post_id', post.id)
      ]);

      if (sectionsDelete.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤:', sectionsDelete.error);
        throw sectionsDelete.error;
      }

      if (typesDelete.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', typesDelete.error);
        throw typesDelete.error;
      }

      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É—è adminSupabase
      const insertPromises = [];

      if (selectedSections.length > 0) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:', selectedSections);
        const sectionInserts = selectedSections.map(sectionId => ({
          post_id: post.id,
          section_id: sectionId
        }));
        
        insertPromises.push(
          adminSupabase.from('post_sections').insert(sectionInserts)
        );
      }

      if (selectedMaterialTypes.length > 0) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—èem –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ç–∏–ø–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', selectedMaterialTypes);
        const typeInserts = selectedMaterialTypes.map(typeId => ({
          post_id: post.id,
          material_type_id: typeId
        }));
        
        insertPromises.push(
          adminSupabase.from('post_material_types').insert(typeInserts)
        );
      }

      if (insertPromises.length > 0) {
        const results = await Promise.all(insertPromises);
        for (const result of results) {
          if (result.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Å–≤—è–∑–µ–π:', result.error);
            throw result.error;
          }
        }
      }

      console.log('üéâ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      });

      return true;

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞",
        variant: "destructive",
      });
      throw error;
    }
  };

  return {
    // –î–∞–Ω–Ω—ã–µ
    posts,
    sections,
    materialTypes,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    isLoading,
    error,
    debugInfo,
    
    // –§—É–Ω–∫—Ü–∏–∏
    loadAllData,
    autoClassifyPost,
    savePostClassification
  };
};
