
/*
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –£–Ω–∏–≤–µ—Ä—Å–£–º
 * 
 * –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤ —Å –∏—Ö —Ç–µ–∫—É—â–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 * - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤ –∫ —Ä–∞–∑–¥–µ–ª–∞–º –∏ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤, —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –ë–î
 * 2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * 3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 * 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
 */

// # 1. –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { Search, Edit, Hash, ExternalLink, Loader2, AlertCircle, RefreshCw } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Checkbox } from '@/components/ui/checkbox';
import { SessionManager } from '@/utils/sessionManager';
import { createClient } from '@supabase/supabase-js';

// # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
interface Post {
  id: string;
  title: string;
  content: string;
  hashtags: string[];
  telegram_url: string;
  published_at: string;
  sections: Array<{
    id: string;
    name: string;
  }>;
  material_types: Array<{
    id: string;
    name: string;
  }>;
}

interface Section {
  id: string;
  name: string;
  hashtags: string[];
}

interface MaterialType {
  id: string;
  name: string;
  hashtags: string[];
}

export const PostManagement = () => {
  // # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [posts, setPosts] = useState<Post[]>([]);
  const [sections, setSections] = useState<Section[]>([]);
  const [materialTypes, setMaterialTypes] = useState<MaterialType[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSection, setSelectedSection] = useState<string>('all');
  const [selectedMaterialType, setSelectedMaterialType] = useState<string>('all');
  const [isLoading, setIsLoading] = useState(true);
  const [editingPost, setEditingPost] = useState<Post | null>(null);
  const [selectedSections, setSelectedSections] = useState<string[]>([]);
  const [selectedMaterialTypes, setSelectedMaterialTypes] = useState<string[]>([]);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<string>('');
  const { toast } = useToast();

  // # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadAllData();
  }, []);

  // # 5. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadAllData = async () => {
    setIsLoading(true);
    setError(null);
    setDebugInfo('');
    
    try {
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
      setDebugInfo('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å—Ç—ã, —Ä–∞–∑–¥–µ–ª—ã, —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤)
      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      
      const { data: postsData, error: postsError } = await supabase
        .from('posts')
        .select('*')
        .order('published_at', { ascending: false });

      if (postsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤:', postsError);
        setDebugInfo(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤: ${postsError.message}`);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã: ${postsError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤`);
      setDebugInfo(`–ù–∞–π–¥–µ–Ω–æ ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

      const { data: sectionsData, error: sectionsError } = await supabase
        .from('sections')
        .select('*')
        .order('name');

      if (sectionsError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤:', sectionsError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–¥–µ–ª—ã: ${sectionsError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sectionsData?.length || 0} —Ä–∞–∑–¥–µ–ª–æ–≤`);

      const { data: materialTypesData, error: materialTypesError } = await supabase
        .from('material_types')
        .select('*')
        .order('name');

      if (materialTypesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', materialTypesError);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${materialTypesError.message}`);
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${materialTypesData?.length || 0} —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤`);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      setSections(sectionsData || []);
      setMaterialTypes(materialTypesData || []);
      setDebugInfo(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${postsData?.length || 0} –ø–æ—Å—Ç–æ–≤, ${sectionsData?.length || 0} —Ä–∞–∑–¥–µ–ª–æ–≤, ${materialTypesData?.length || 0} —Ç–∏–ø–æ–≤`);

      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
      if (!postsData || postsData.length === 0) {
        console.log('‚ÑπÔ∏è –ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        setPosts([]);
        setDebugInfo('–ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        setIsLoading(false);
        return;
      }

      // # 6. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
      console.log('üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤...');
      setDebugInfo('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...');

      const postsWithRelations = await Promise.all(
        postsData.map(async (post, index) => {
          console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç ${index + 1}/${postsData.length}: ${post.title}`);
          
          try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            const { data: postSections, error: sectionsError } = await supabase
              .from('post_sections')
              .select(`
                sections!inner (
                  id,
                  name
                )
              `)
              .eq('post_id', post.id);

            if (sectionsError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}:`, sectionsError);
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
            const { data: postMaterialTypes, error: typesError } = await supabase
              .from('post_material_types')
              .select(`
                material_types!inner (
                  id,
                  name
                )
              `)
              .eq('post_id', post.id);

            if (typesError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${post.id}:`, typesError);
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞ —Å —Å–≤—è–∑—è–º–∏
            const sections = (postSections || []).map(ps => ps.sections).filter(Boolean);
            const material_types = (postMaterialTypes || []).map(pmt => pmt.material_types).filter(Boolean);

            console.log(`‚úÖ –ü–æ—Å—Ç "${post.title}": ${sections.length} —Ä–∞–∑–¥–µ–ª–æ–≤, ${material_types.length} —Ç–∏–ø–æ–≤`);

            return {
              ...post,
              sections,
              material_types
            };
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ ${post.id}:`, error);
            return {
              ...post,
              sections: [],
              material_types: []
            };
          }
        })
      );

      console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      setPosts(postsWithRelations);
      setDebugInfo(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${postsWithRelations.length} –ø–æ—Å—Ç–æ–≤ —Å –∏—Ö —Å–≤—è–∑—è–º–∏`);

    } catch (error: any) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      setDebugInfo(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  // # 7. –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
  const autoClassifyPost = (post: Post) => {
    const autoSections: string[] = [];
    const autoMaterialTypes: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –ø–æ—Å—Ç–∞ —Ö–µ—à—Ç–µ–≥–∞–º —Ä–∞–∑–¥–µ–ª–æ–≤
    sections.forEach(section => {
      const hasMatchingHashtag = section.hashtags.some(sectionTag =>
        post.hashtags.some(postTag => 
          postTag.toLowerCase() === sectionTag.toLowerCase()
        )
      );
      if (hasMatchingHashtag) {
        autoSections.push(section.id);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –ø–æ—Å—Ç–∞ —Ö–µ—à—Ç–µ–≥–∞–º —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materialTypes.forEach(type => {
      const hasMatchingHashtag = type.hashtags.some(typeTag =>
        post.hashtags.some(postTag => 
          postTag.toLowerCase() === typeTag.toLowerCase()
        )
      );
      if (hasMatchingHashtag) {
        autoMaterialTypes.push(type.id);
      }
    });

    return { autoSections, autoMaterialTypes };
  };

  // # 8. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞
  const filteredPosts = posts.filter(post => {
    const matchesSearch = !searchTerm || 
      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.content.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesSection = selectedSection === 'all' || 
      post.sections?.some(s => s.id === selectedSection);
    
    const matchesMaterialType = selectedMaterialType === 'all' ||
      post.material_types?.some(mt => mt.id === selectedMaterialType);
    
    return matchesSearch && matchesSection && matchesMaterialType;
  });

  // # 9. –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  const openEditDialog = (post: Post) => {
    const { autoSections, autoMaterialTypes } = autoClassifyPost(post);
    
    setEditingPost(post);
    setSelectedSections(post.sections?.map(s => s.id) || autoSections);
    setSelectedMaterialTypes(post.material_types?.map(mt => mt.id) || autoMaterialTypes);
  };

  // # 10. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
  const handleSectionToggle = (sectionId: string) => {
    setSelectedSections(prev => 
      prev.includes(sectionId) 
        ? prev.filter(id => id !== sectionId)
        : [...prev, sectionId]
    );
  };

  // # 11. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ
  const handleMaterialTypeToggle = (typeId: string) => {
    setSelectedMaterialTypes(prev => 
      prev.includes(typeId) 
        ? prev.filter(id => id !== typeId)
        : [...prev, typeId]
    );
  };

  // # 12. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø)
  const savePostClassification = async () => {
    if (!editingPost) return;

    setIsSaving(true);
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞:', editingPost.id);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π DELETE
      const currentSession = SessionManager.getCurrentSession();
      if (!currentSession) {
        throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏');
      }

      console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è');

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
      const adminSupabase = createClient(
        'https://gpfsdgrpnlnpjovhufxu.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdwZnNkZ3JwbmxucGpvdmh1Znh1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyOTk2MTQsImV4cCI6MjA2NTg3NTYxNH0.1-fuATIN4x7754HajqvGGKLrQ3tkjbxyw7QluoulJ_8',
        {
          global: {
            headers: {
              'authorization': currentSession.sessionToken
            }
          }
        }
      );

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ —Ç–∏–ø–æ–≤');
      const [sectionsDelete, typesDelete] = await Promise.all([
        adminSupabase.from('post_sections').delete().eq('post_id', editingPost.id),
        adminSupabase.from('post_material_types').delete().eq('post_id', editingPost.id)
      ]);

      if (sectionsDelete.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤:', sectionsDelete.error);
        throw sectionsDelete.error;
      }

      if (typesDelete.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', typesDelete.error);
        throw typesDelete.error;
      }

      console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ INSERT —Ä–∞–±–æ—Ç–∞–µ—Ç)
      const insertPromises = [];

      if (selectedSections.length > 0) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:', selectedSections);
        const sectionInserts = selectedSections.map(sectionId => ({
          post_id: editingPost.id,
          section_id: sectionId
        }));
        
        insertPromises.push(
          supabase.from('post_sections').insert(sectionInserts)
        );
      }

      if (selectedMaterialTypes.length > 0) {
        console.log('‚ûï –î–æ–±–∞–≤–ª—èem –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ —Å —Ç–∏–ø–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', selectedMaterialTypes);
        const typeInserts = selectedMaterialTypes.map(typeId => ({
          post_id: editingPost.id,
          material_type_id: typeId
        }));
        
        insertPromises.push(
          supabase.from('post_material_types').insert(typeInserts)
        );
      }

      if (insertPromises.length > 0) {
        const results = await Promise.all(insertPromises);
        for (const result of results) {
          if (result.error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Å–≤—è–∑–µ–π:', result.error);
            throw result.error;
          }
        }
      }

      console.log('üéâ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      });

      setEditingPost(null);
      loadAllData(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  // # 13. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center space-y-2 flex-col">
            <Loader2 className="h-8 w-8 animate-spin text-blue-600" />
            <span className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
            <span className="text-sm text-gray-500">{debugInfo}</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // # 14. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-center space-y-4 flex-col text-red-600">
            <AlertCircle className="h-8 w-8" />
            <span className="text-lg">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</span>
            <span className="text-sm text-gray-500 max-w-md text-center">{error}</span>
            <span className="text-xs text-gray-400 max-w-md text-center">{debugInfo}</span>
            <Button onClick={loadAllData} variant="outline" className="mt-4">
              <RefreshCw className="mr-2 h-4 w-4" />
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  // # 15. –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
  return (
    <div className="space-y-6">
      {/* –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Edit className="h-5 w-5" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏ ({posts.length} –ø–æ—Å—Ç–æ–≤)
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
            –û—Ç–ª–∞–¥–∫–∞: {debugInfo}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
            <div className="relative">
              <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º */}
            <Select value={selectedSection} onValueChange={setSelectedSection}>
              <SelectTrigger>
                <SelectValue placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–¥–µ–ª—É" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã</SelectItem>
                {sections.map(section => (
                  <SelectItem key={section.id} value={section.id}>
                    {section.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
            <Select value={selectedMaterialType} onValueChange={setSelectedMaterialType}>
              <SelectTrigger>
                <SelectValue placeholder="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">–í—Å–µ —Ç–∏–ø—ã</SelectItem>
                {materialTypes.map(type => (
                  <SelectItem key={type.id} value={type.id}>
                    {type.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-lg">
            –ü–æ–∫–∞–∑–∞–Ω–æ {filteredPosts.length} –∏–∑ {posts.length} –ø–æ—Å—Ç–æ–≤
          </div>
        </CardContent>
      </Card>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤ */}
      <Card>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="min-w-[300px]">–ó–∞–≥–æ–ª–æ–≤–æ–∫</TableHead>
                  <TableHead className="min-w-[200px]">–†–∞–∑–¥–µ–ª—ã</TableHead>
                  <TableHead className="min-w-[200px]">–¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</TableHead>
                  <TableHead className="min-w-[150px]">–•–µ—à—Ç–µ–≥–∏</TableHead>
                  <TableHead className="w-[100px]">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredPosts.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-8 text-gray-500">
                      {posts.length === 0 
                        ? "–ü–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
                        : "–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
                      }
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredPosts.map(post => (
                    <TableRow key={post.id}>
                      {/* –ö–æ–ª–æ–Ω–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥–∞—Ç—ã */}
                      <TableCell className="max-w-xs">
                        <div className="truncate font-medium">{post.title}</div>
                        <div className="text-xs text-gray-500">
                          {new Date(post.published_at).toLocaleDateString('ru-RU')}
                        </div>
                      </TableCell>

                      {/* –ö–æ–ª–æ–Ω–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ */}
                      <TableCell>
                        <div className="flex flex-wrap gap-1">
                          {post.sections?.map(section => (
                            <Badge key={section.id} variant="secondary" className="text-xs">
                              {section.name}
                            </Badge>
                          ))}
                          {(!post.sections || post.sections.length === 0) && (
                            <span className="text-xs text-gray-400">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>
                          )}
                        </div>
                      </TableCell>

                      {/* –ö–æ–ª–æ–Ω–∫–∞ —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
                      <TableCell>
                        <div className="flex flex-wrap gap-1">
                          {post.material_types?.map(type => (
                            <Badge key={type.id} variant="outline" className="text-xs">
                              {type.name}
                            </Badge>
                          ))}
                          {(!post.material_types || post.material_types.length === 0) && (
                            <span className="text-xs text-gray-400">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</span>
                          )}
                        </div>
                      </TableCell>

                      {/* –ö–æ–ª–æ–Ω–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ */}
                      <TableCell>
                        <div className="flex flex-wrap gap-1">
                          {post.hashtags?.slice(0, 3).map(hashtag => (
                            <span key={hashtag} className="inline-flex items-center text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                              <Hash className="h-3 w-3 mr-0.5" />
                              {hashtag}
                            </span>
                          ))}
                          {post.hashtags && post.hashtags.length > 3 && (
                            <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded">+{post.hashtags.length - 3}</span>
                          )}
                        </div>
                      </TableCell>

                      {/* –ö–æ–ª–æ–Ω–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π */}
                      <TableCell>
                        <div className="flex gap-2">
                          {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button 
                                variant="outline" 
                                size="sm"
                                onClick={() => openEditDialog(post)}
                              >
                                <Edit className="h-4 w-4" />
                              </Button>
                            </DialogTrigger>

                            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                            <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
                              <DialogHeader>
                                <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é</DialogTitle>
                              </DialogHeader>
                              <div className="space-y-4">
                                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ */}
                                <div>
                                  <h4 className="font-medium mb-2">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</h4>
                                  <p className="text-sm text-gray-600 bg-gray-50 p-2 rounded">{editingPost?.title}</p>
                                </div>
                                
                                {/* –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤ */}
                                <div>
                                  <h4 className="font-medium mb-2">–†–∞–∑–¥–µ–ª—ã:</h4>
                                  <div className="grid grid-cols-1 gap-2 max-h-40 overflow-y-auto border rounded p-3 bg-gray-50">
                                    {sections.map(section => (
                                      <div key={section.id} className="flex items-center space-x-2">
                                        <Checkbox
                                          id={`section-${section.id}`}
                                          checked={selectedSections.includes(section.id)}
                                          onCheckedChange={() => handleSectionToggle(section.id)}
                                        />
                                        <label 
                                          htmlFor={`section-${section.id}`}
                                          className="text-sm cursor-pointer flex-1 font-medium"
                                        >
                                          {section.name}
                                        </label>
                                      </div>
                                    ))}
                                  </div>
                                </div>

                                {/* –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
                                <div>
                                  <h4 className="font-medium mb-2">–¢–∏–ø—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:</h4>
                                  <div className="grid grid-cols-2 gap-2 max-h-40 overflow-y-auto border rounded p-3 bg-gray-50">
                                    {materialTypes.map(type => (
                                      <div key={type.id} className="flex items-center space-x-2">
                                        <Checkbox
                                          id={`type-${type.id}`}
                                          checked={selectedMaterialTypes.includes(type.id)}
                                          onCheckedChange={() => handleMaterialTypeToggle(type.id)}
                                        />
                                        <label 
                                          htmlFor={`type-${type.id}`}
                                          className="text-sm cursor-pointer flex-1 font-medium"
                                        >
                                          {type.name}
                                        </label>
                                      </div>
                                    ))}
                                  </div>
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                                <div className="flex justify-end gap-2 pt-4 border-t">
                                  <Button variant="outline" onClick={() => setEditingPost(null)}>
                                    –û—Ç–º–µ–Ω–∞
                                  </Button>
                                  <Button onClick={savePostClassification} disabled={isSaving}>
                                    {isSaving ? (
                                      <>
                                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                                      </>
                                    ) : (
                                      '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
                                    )}
                                  </Button>
                                </div>
                              </div>
                            </DialogContent>
                          </Dialog>
                          
                          {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ—Å—Ç—É –≤ Telegram */}
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => window.open(post.telegram_url, '_blank')}
                          >
                            <ExternalLink className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
